#!/usr/bin/python3

import argparse
import socket
import ssl
import json
import threading
#import certifi
import queue
import re




class TCP_Proxy_Server:
    def __init__(self, ip_cdn,port_cdn,ip_origin,port_origin):
        self.ip_cdn = ip_cdn
        self.port_cdn = port_cdn
        self.ip_origin = ip_origin
        self.port_origin = port_origin
        self.server_socket = None
    

    def start(self):
        
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        host = '127.0.0.1'
        #port = self.port_origin
        #self.server_socket.bind(('127.0.0.1', self.port_cdn))
        try:
            self.server_socket.bind(('', self.port_cdn))  # Binding to localhost and the port
            #print(f"Proxy server listening on {self.ip_cdn}:{self.port_cdn}")
        except Exception as e:
            print(f"Error binding server socket: {e}")
            return
        self.server_socket.listen(5)
        print(f"Proxy server listening on {self.ip_cdn}:{self.port_cdn}")
        while True:
            client_socket, client_address = self.accept_client_connection()
            print(f"New client connected: {client_address}")
            threading.Thread(target=self.handle_client, args=(client_socket, client_address), daemon = True).start()

    def accept_client_connection(self):
        client_socket, client_address = self.server_socket.accept()
        #context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH,cafile=certifi.where())
        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
        #context.check_hostname = True
        context.load_cert_chain(certfile="certs/cdn_cert.pem", keyfile="certs/cdn_key.pem")
        client_socket = context.wrap_socket(client_socket, server_side=True)
        return client_socket, client_address
    
    def handle_client(self, client_socket, client_address):
        origin_socket = self.connect_to_origin()
        client_to_origin = threading.Thread(target=self.relay_messages, args=(client_socket, origin_socket))
        origin_to_client = threading.Thread(target=self.relay_messages, args=(origin_socket, client_socket))
        client_to_origin.start()
        origin_to_client.start()
        client_to_origin.join()
        origin_to_client.join()
        print(f"Closing connection with {client_address}")
        client_socket.close()
        origin_socket.close()
    
    
    def connect_to_origin(self):
        # Create a connection to the origin server
        origin_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        origin_socket.connect((self.ip_origin, self.port_origin))
        print("Connected")
        #context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,cafile=certifi.where())
        context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
        #ck_hostname = True
        try:
            origin_socket = context.wrap_socket(origin_socket, server_hostname="cs.duke.edu")
            print("SSL connection established")
        except ssl.SSLError as e:
            print(f"SSL error: {e}")
        except Exception as e:
            print(f"General error: {e}")
        #origin_socket = context.wrap_socket(origin_socket, server_side=False)
    
        print(f"Connected to origin server at {self.ip_origin}:{self.port_origin}")
        return origin_socket
    
    def relay_messages(self, src_socket, dst_socket):
    # Relay messages between the source and destination sockets
        while True:
            data = src_socket.recv(4096)
            if not data:
                break  # End of stream; no more data from source
            print(f"Relaying data: {data}")
            dst_socket.sendall(data)



class HTTPS_Proxy_Server(TCP_Proxy_Server):
    def __init__(self, ip_cdn, port_cdn, ip_origin, port_origin, cert_file, key_file, origin_domain):
        super().__init__(ip_cdn, port_cdn, ip_origin, port_origin)
        self.certfile = cert_file
        self.keyfile = key_file
        self.origin_domain = origin_domain
    def accept_client_connection(self):
        """ Accepts a TLS client connection. """
        client_socket, client_address = self.server_socket.accept()
        #context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH,cafile=certifi.where())
        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)

        context.load_cert_chain(certfile=self.certfile, keyfile=self.keyfile)
        tls_client_socket = context.wrap_socket(client_socket, server_side=True)
        return tls_client_socket, client_address

    def connect_to_origin(self):
        # Create a connection to the origin server
        origin_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        origin_socket.connect((self.ip_origin, self.port_origin))
        print("Connected")
        #context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,cafile=certifi.where())
        context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
        #ck_hostname = True     
        try:
            origin_socket = context.wrap_socket(origin_socket, server_hostname=self.origin_domain)
            print("SSL connection established")
        except ssl.SSLError as e:
            print(f"SSL error: {e}")
        except Exception as e:
            print(f"General error: {e}")
        #origin_socket = context.wrap_socket(origin_socket, server_side=False)
    
        print(f"Connected to origin server at {self.ip_origin}:{self.port_origin}")
        return origin_socket
    

    def receive_client_request(self, client_socket):
        """ Receives an HTTP request from the client. """
        request_data = b""
        while b"\r\n\r\n" not in request_data:  # Ensure we read full request
            chunk = client_socket.recv(4096)
            if not chunk:
                break
            request_data += chunk
        return request_data
    def modify_request(self, request_data):
        """ Modifies the client request to add `Connection: close`. """
        print("Modifying request...")
        print("Original request data:")
        print(request_data)
        request_lines = request_data.decode("iso-8859-1").split("\r\n")
        headers = []

        for line in request_lines:
            if line.lower().startswith("connection:"):
                continue  # Remove existing Connection header
            headers.append(line)
        headers.append("Connection: close")  # Add new Connection header
        return "\r\n".join(headers).encode("iso-8859-1") + b"\r\n\r\n"
    def receive_origin_response(self, origin_socket):
        """ Receives the response from the origin server. """
        response_data = b""
        while True:
            chunk = origin_socket.recv(4096)
            if not chunk:
                break
            response_data += chunk
        return response_data

    def handle_client(self, client_socket, client_address):
        """ Handles the client request, forwards it to the origin, and relays the response. """
        origin_socket = None  # Initialize to None to avoid UnboundLocalError

        try:
            request_data = self.receive_client_request(client_socket)
            if not request_data:
                return
            print("Original client request:")
            print(request_data)

            modified_request = self.modify_request(request_data)
            print("Modified client request:")
            print(modified_request)
            origin_socket = self.connect_to_origin()  # Assign before usage
            origin_socket.sendall(modified_request)

            response_data = self.receive_origin_response(origin_socket)
            client_socket.sendall(response_data)

        finally:
            client_socket.close()
            if origin_socket:  # Ensure it was initialized before closing
                origin_socket.close()



class Persistant_Proxy_Server(HTTPS_Proxy_Server):
    def __init__(self, ip_cdn, port_cdn, ip_origin, port_origin, cert_file, key_file, origin_domain):
        super().__init__(ip_cdn, port_cdn, ip_origin, port_origin,cert_file, key_file, origin_domain)
        self.connection_pool = queue.Queue()

    def log_request(self,client_ip, request_data, response_data):
        request_line, host = self.parse_request(request_data)
        status_code, content_length = self.parse_response(response_data)

        # Format: IP \t Request \t Host \t Status Code \t Content Length
        log_entry = f"{client_ip}\t{request_line}\t{host}\t{status_code}\t{content_length}\n"
        print(log_entry)
        
    def is_socket_valid(self, sock):
        if sock is None:
            print("[DEBUG] Connection is None, returning False")
            return False
        try:
            sock.settimeout(0.1)
            sock.send(b"")  # Check if socket is writable
            sock.settimeout(None)
            return True
        except (socket.error, ValueError):
            print("[DEBUG] Connection error detected, returning False")
            return False
        
    def connect_to_origin(self):
        """Establishes a secure TLS connection to the origin server or reuses an existing one."""
        while not self.connection_pool.empty():
            try:
                origin_socket = self.connection_pool.get_nowait()  # Avoid waiting
                print("Reusing existing connection to origin server.")
                
                if self.is_socket_valid(origin_socket):
                    return origin_socket
                else:
                    print("Stale connection found. Discarding and creating a new one.")
                    origin_socket.close()
            except queue.Empty:
                break  # Exit loop if no connections are available

        # Create a new connection if no valid ones exist
        print("Creating new connection to origin server.")
        origin_socket = socket.create_connection((self.ip_origin, self.port_origin), timeout=5)

        try:
            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
            origin_socket = context.wrap_socket(origin_socket, server_hostname=self.origin_domain)
            print("SSL connection established")
        except ssl.SSLError as e:
            print(f"SSL error: {e}")
            origin_socket.close()
            return None  # Return None if SSL fails

        print(f"Connected to origin server at {self.ip_origin}:{self.port_origin}")
        return origin_socket
    
    def parse_request(self,request_data):
        try:
            request_text = request_data.decode("utf-8")
            request_lines = request_text.split("\r\n")

            # First line is always the GET request line
            request_line = request_lines[0]

            # Extract Host header
            host_line = next((line for line in request_lines if line.lower().startswith("host:")), None)
            host = host_line.split(": ", 1)[1] if host_line else "Unknown Host"

            return request_line, host
        except Exception as e:
            print(f"Error parsing request: {e}")
            return "ERROR", "Unknown Host"
        
    def parse_response(self, response_data):
        try:
            response_text = response_data.decode("utf-8")
            response_lines = response_text.split("\r\n")

            # Find the status line that starts with "HTTP/"
            status_line = next((line for line in response_lines if line.startswith("HTTP/")), None)

            if status_line:
                status_code = status_line.split(" ")[1] if len(status_line.split(" ")) > 1 else "500"
            else:
                status_code = "500"  # Default to 500 if no valid status line found

            # Extract Content-Length header
            content_length = next((line.split(": ")[1] for line in response_lines if line.lower().startswith("content-length:")), "0")

            return status_code, int(content_length)
        except Exception as e:
            print(f"Error parsing response: {e}")
            return "500", 0
        
    def sender(self, client_sock, msg, length):
        sent_count = 0
        while sent_count < length:
            bytes_sent = client_sock.send(msg[sent_count:])
            if bytes_sent == 0:
                raise RuntimeError("Socket connection broken")
            sent_count += bytes_sent
        print(f"[DEBUG] Sent {sent_count} bytes.")

    def handle_client(self, client_socket, client_address):
        # Handles the client request, forwards it to the origin, and relays the response.
        origin_socket = None  # Initialize to None to avoid UnboundLocalError

        try:
            request_data = self.receive_client_request(client_socket)
            if not request_data:
                print("No request data received")
                return
            print("Original client request:")
            print(request_data)
            origin_socket = self.connect_to_origin()  # Assign before usage
            print("Connected")
            modified_request = self.modify_request(request_data)
            print("Modified client request:")
            print(modified_request)
            origin_socket.sendall(modified_request)
            print("Sent")
            print(self.is_socket_valid(origin_socket))
            response_data = self.receive_origin_response(origin_socket)
            print(f"Response: {response_data}")
            try:
                self.sender(client_socket,response_data,len(response_data))
            except Exception as e:
                print(f"Error sending data to client: {e}")
            print("LOGLOGLOGLOGLOG")
            self.log_request(client_address[0], request_data, response_data)
            if origin_socket and self.is_socket_valid(origin_socket):  # Ensure it was initialized before closing
                self.connection_pool.put(origin_socket)
            else:
                origin_socket.close()

        except Exception as e:
            print(f"Error handling client {client_address} : {e}")
        finally:
            client_socket.close()


    def receive_origin_response(self, origin_socket):
    #Receives the response from the origin server and reads until the end of the response body.
        response_data = b""
        headers_received = False
        content_length = None
        
        while True:
            # Receive response in chunks
            chunk = origin_socket.recv(4096)
            print(chunk)
            if not chunk:
                break
            
            # Add received chunk to the response data
            response_data += chunk
            
            # If headers haven't been processed yet, look for the headers and Content-Length
            if not headers_received:
                headers_end = response_data.find(b"\r\n\r\n")
                if headers_end != -1:
                    headers_received = True
                    # Headers are finished, so we can process the headers now
                    headers = response_data[:headers_end]
                    #body = response_data[headers_end + 4:]  # Remove headers from the response data
                    
                    # Look for Content-Length header
                    match = re.search(rb"Content-Length: (\d+)", headers)
                    if match:
                        content_length = int(match.group(1))  # Set the content length
                    else:
                        raise ValueError("Content-Length header not found.")
                    #if content_length is not None:
                    #    response_data = headers + body
            
            # If the content length is known and we've read enough data, break
            print(f"content length {content_length}")
            #if content_length is not None and len(response_data) >= content_length:
            #    break
            if headers_received and content_length is not None:
            # Total expected = headers length + CRLF (4 bytes) + body length (content_length)
                total_expected = response_data.find(b"\r\n\r\n") + 4 + content_length
            if len(response_data) >= total_expected:
                break

        return response_data
    
    def modify_request(self, request_data):
        #Modifies the client request to add `Connection: close`.
        #print("Modifying request...")
        #print("Original request data:")
        #print(request_data)
        
        request_lines = request_data.decode("iso-8859-1").split("\r\n")
        headers = []
        connection_header_found = False
        for line in request_lines:
            if line.lower().startswith("connection:"):
                connection_header_found = True
                headers.append("Connection: keep-alive")  # Modify existing header
            elif line == "":
                break
            else:
                headers.append(line)
        if not connection_header_found:
            headers.insert(1, "Connection: keep-alive")  

        modified_request = "\r\n".join(headers) + "\r\n\r\n"
        return modified_request.encode("iso-8859-1")
    def accept_client_connection(self):
        client_socket, client_address = self.server_socket.accept()
        #context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH,cafile=certifi.where())
        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
        context.check_hostname = False
        context.load_cert_chain(certfile="certs/cdn_cert.pem", keyfile="certs/cdn_key.pem")
        try:
            client_socket = context.wrap_socket(client_socket, server_side=True)
        except ssl.SSLError as e:
            print(f"SSL Error: {e}")
            client_socket.close()
            return None, None
        return client_socket, client_address
    
class Caching_Proxy_Server(Persistant_Proxy_Server):
    def __init__(self, ip_cdn, port_cdn, ip_origin, port_origin, cert_file, key_file, origin_domain, ignore_query_string=False):
        # Call the parent constructor
        super().__init__(ip_cdn, port_cdn, ip_origin, port_origin, cert_file, key_file, origin_domain)
        self.ignore_query_string = ignore_query_string
        # Use a dictionary for caching; wrap it with a lock for thread safety.
        self.cache = {}
        self.cache_lock = threading.Lock()    

    def handle_client(self, client_socket, client_address):
    # Handles the client request, forwards it to the origin, and relays the response.
        origin_socket = None  # Initialize to None to avoid UnboundLocalError

        try:
            request_data = self.receive_client_request(client_socket)
            if not request_data:
                print("No request data received")
                return
            print("Original client request:")
            print(request_data)

            # Parse the request line to extract the method and path.
            try:
                request_text = request_data.decode("utf-8", errors="replace")
                request_line = request_text.split("\r\n")[0]
                parts = request_line.split(" ")
                if len(parts) < 2:
                    print("Malformed request")
                    return
                method = parts[0].upper()
                full_path = parts[1]
            except Exception as e:
                print(f"Error parsing request line: {e}")
                return

            # For GET requests, derive cache key and check cache.
            cache_key = None
            if method == "GET":
                if self.ignore_query_string:
                    cache_key = full_path.split("?")[0]
                else:
                    cache_key = full_path
                cached_response = self.cache_get(cache_key)
                if cached_response:
                    print(f"[CACHE] Hit for {cache_key}")
                    try:
                        self.sender(client_socket, cached_response, len(cached_response))
                    except Exception as e:
                        print(f"Error sending cached data to client: {e}")
                    return
                else:
                    print(f"[CACHE] Miss for {cache_key}")

            origin_socket = self.connect_to_origin()  # Assign before usage
            print("Connected")
            modified_request = self.modify_request(request_data)
            print("Modified client request:")
            print(modified_request)
            origin_socket.sendall(modified_request)
            print("Sent")
            print(self.is_socket_valid(origin_socket))
            response_data = self.receive_origin_response(origin_socket)
            print(f"Response: {response_data}")
            try:
                self.sender(client_socket, response_data, len(response_data))
            except Exception as e:
                print(f"Error sending data to client: {e}")
            print("LOGLOGLOGLOGLOG")
            self.log_request(client_address[0], request_data, response_data)

            # If the method is GET, check if the response is cacheable and store it.
            if method == "GET" and cache_key is not None:
                # Extract header section (assumes headers and body are separated by \r\n\r\n)
                header_section = response_data.split(b"\r\n\r\n", 1)[0].decode("utf-8", errors="replace")
                headers = self.parse_response_headers(header_section)
                if self.is_cacheable(full_path, headers):
                    self.cache_put(cache_key, response_data)

            if origin_socket and self.is_socket_valid(origin_socket):  # Ensure it was initialized before closing
                self.connection_pool.put(origin_socket)
            else:
                origin_socket.close()

        except Exception as e:
            print(f"Error handling client {client_address} : {e}")
        finally:
            client_socket.close()

    def cache_get(self, path):
        with self.cache_lock:
            return self.cache.get(path)

    def cache_put(self, path, response_data):
        with self.cache_lock:
            self.cache[path] = response_data
            print(f"[CACHE] Stored response for {path}")

    def is_cacheable(self, path, headers):
        # Check if the response should not be cached based on Cache-Control
        cache_control = headers.get("Cache-Control", "").lower()
        if "no-store" in cache_control:
            return False

        # Derive the file extension (special handling for "/" can be added)
        import os
        # Remove query string if present
        path_only = path.split("?")[0]
        ext = os.path.splitext(path_only)[1]
        # Cache only common static content (adjust the list as needed)
        if ext in ['.html', '.css', '.js']:
            return True
        # Optionally, treat "/" as cacheable
        if path_only == "/":
            return True
        return False

    def parse_response_headers(self, header_str):
        """
        Given a string containing the HTTP response headers, parse them into a dictionary.
        """
        headers = {}
        lines = header_str.split("\r\n")
        for line in lines[1:]:  # skip the status line
            if ": " in line:
                key, value = line.split(": ", 1)
                headers[key] = value
        return headers


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="HTTPS Proxy Server for CDN")

    # Define command-line arguments
    parser.add_argument("--cdn-port", type=int, required=True, help="The port number for the CDN proxy", )
    parser.add_argument("--origin-domain", type=str, required=True, help="The domain of the origin server")
    parser.add_argument("--origin-addr", type=str, required=True, help="The IP address of the origin server", default="127.0.0.1")
    parser.add_argument("--origin-port", type=int, required=True, help="The port of the origin server", default=443)

    # Parse the arguments
    args = parser.parse_args()

    # Assign variables from parsed arguments
    cdn_port = args.cdn_port
    origin_domain = args.origin_domain
    origin_addr = args.origin_addr
    origin_port = args.origin_port
    
    proxy = Caching_Proxy_Server("127.0.0.1",cdn_port,origin_addr,origin_port,"certs/cdn_cert.pem","certs/cdn_key.pem",origin_domain=origin_domain)
    proxy.start()